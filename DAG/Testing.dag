# Overall manager!

# single job that goes out and asks for all complete refseq reference ftp locations
# an initial pre-script runs some overhead, checks for already existing maps and files
# each node within this dag has a folder that contains all of that nodes submit files, dag files, wrapper scripts, and run scripts
# as of this iteration the DAG contains two types of nodes, large planning and outlining single submit file jobs,
# and external subdags that 

# TEST CONDITIONS
# a script and appropriately structured json files can be used to adjust testing and functional limits

# A == OutlineCollection
JOB A NodeA/Run.sub

# B == RunCollection
# pseudo-recursive step, attempt to grab all assemblies
SUBDAG EXTERNAL B NodeB/Run.dag

# C == OutlineComparisons
# for all assemblies, new and old, build a map of the relevant pairwise comparisons
# the map name will be tied to the version number, so post initial these will probably be smaller
# however it is the job of the D node to plan how to execute those comparisons
# the total jobs are the within-new-set all-vs-all (n x n upper triangle) and the new set vs old set (n x m)
# JOB C SetTotalJobs.sub
# JOB C NodeC/Run.sub

# D == Comparisons, 50000 at a time
# The Run.dag file controls everything that is triggered within this folder
# SUBDAG EXTERNAL D Comparisons.dag
# SUBDAG EXTERNAL D NodeD/Run.dag

# nothing fancy
PARENT A CHILD B

# attempt collection a few times
# as of the writing the initial iteration this script (20240124) there are 4376 complete refseq reps that are returned by the initial entrez query
# implying a total of ~ 9.6M pairwise comparisons requiring at least 192 iterations of 50K
# build in extra iterations as a cushion
RETRY B 3

# when the DAG is triggered we have some housekeeping to do
SCRIPT PRE A ManagerStart.sh

# When the first node completes, update the logfile
SCRIPT POST A PostALogUpdate.sh

# When the DAG completes its last node, edit a tracking / logging file
# SCRIPT POST B ManagerEnd.sh
SCRIPT POST B CollectionRetry.sh

